# enum offerCategory {}

# enum storeCategory {}

# enum UserRole {
#   Owner
#   Officer
#   Managers
#   Staff
#   Employees
#   User
# }

enum invitedStatus {
  hold
  accepted
  canceled
}

# type Company @model {
#   id: ID!
#   name: String!
#   stores: [Store]!  # ont to many
#     @connection(
#       name: "CompanyStores"
#       keyField: "storeId"
#       sortField: "createdAt"
#     )
#   owner: User! @connection # ont to one
#   officer: User!
#   createdAt: AWSTimestamp!
#   updatedAt: AWSTimestamp!
# }

# type Store @model {
#   id: ID!
#   admin: User!
#   company: Company! @connection(name: "CompanyStores", keyField: "companyId")
#   offres: [Offer!]!  # ont to many
#     @connection(
#       name: "StoreOffers"
#       keyField: "offerId"
#       sortField: "createdAt"
#     )
#   createdAt: AWSTimestamp!
#   updatedAt: AWSTimestamp!
# }

# type Offer @model {
#   id: ID!
#   store: Store! @connection(name: "StoreOffers", keyField: "storeId")
#   title: String!
#   content: String!
#   createdAt: AWSTimestamp!
#   updatedAt: AWSTimestamp!
# }

type User @model @auth(rules: [{allow: owner}]) @key(fields: ["username"]) {
  id: ID!
  username: String!
  display_name: String!
  logo: String!

  # invited_rooms: [InvitedRoom!]!
  #   @connection(
  #     name: "InvitedRooms"
  #     keyField: "toUserId"
  #     sortField: "createdAt"
  #   )

  joined_rooms: [RoomUser!]!
    @connection(name: "UserRooms", keyField: "userId", sortField: "createdAt")
  owned_rooms: [Room!]!
    @connection(name: "OwnerRooms", keyField: "userId", sortField: "createdAt")

  # joined_stores: [Store!]!
  # owned_stores: [Store!]!
}

type InvitedRoom @model(subscriptions: null) @key(fields: ["toUsername"]) {
  id: ID!
  room: Room @connection(name: "InvitingUsers")
  toUser: User #@connection(name: "InvitedRooms")
  toUsername: String!
  fromUser: User @connection
  status: invitedStatus!
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Room @model @key(fields: ["owner"]) {
  id: ID!
  name: String!
  image: String!
  owner: String!
  user: User! @connection(name: "OwnerRooms")
  inviting: [InvitedRoom!]!
    @connection(name: "InvitingUsers", keyField: "roomId")
  users: [RoomUser] @connection(name: "RoomUsers")
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  messages: [Message!]!
    @connection(
      name: "RoomMessages"
      keyField: "roomId"
      sortField: "createdAt"
    )
}

type Message @model(subscriptions: null) {
  id: ID!
  content: String!
  when: String!
  roomId: ID!
  owner: String!
  user: User! @connection
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
  room: Room @connection(name: "RoomMessages", keyField: "roomId")
}

type Subscription {
  onCreateMessage(roomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])

  onCreateInvitedRoom(toUsername: String!): InvitedRoom
    @aws_subscribe(mutations: ["createInvitedRoom"])
}

# リレーション

type RoomUser @model(queries: null) {
  id: ID!
  room: Room! @connection(name: "RoomUsers")
  user: User! @connection(name: "UserRooms")
  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}
