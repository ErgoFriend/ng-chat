# enum offerCategory {}

# enum storeCategory {}

enum UserRole {
  # Owner
  # Officer
  # Managers
  # Staff
  # Employees
  Campany
  Applicant
}

enum invitedStatus {
  hold
  accepted
  canceled
}

type Company @model @key(fields: ["id"]) {
  id: ID!
  # stores: [Store]!  # ont to many
  #   @connection(
  #     name: "CompanyStores"
  #     keyField: "storeId"
  #     sortField: "createdAt"
  #   )
  # officer: User!
  name: String!
  email: String
  logo: String
  backgroundImg: String
  about: String
  area: Area @connection(name: "CompanyArea")
  owner: User! @connection

  articles: [Article]! @connection(name: "CompanyArticle")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type ArticleTag @model @key(fields: ["id"]) {
  id: ID!
  article: Article! @connection(name: "ArticleTags")
  articleTagMaster: ArticleTagMaster! @connection(name: "TagArticles")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type ArticleTagMaster
  @model
  @key(fields: ["id"])
  @key(name: "Bycontent", fields: ["content"]) {
  id: ID!
  content: String!
  articles: [ArticleTag]! @connection(name: "TagArticles")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Article @model @key(fields: ["id"]) {
  id: ID!
  title: String!
  tags: [ArticleTag]! @connection(name: "ArticleTags")
  thumbnail: String
  company: Company! @connection(name: "CompanyArticle")
  content: String!
  isOpen: ArticleStatus!
  comments: [Comment]! @connection(name: "ArticleComments")
  area: Area! @connection(name: "ArticleArea")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

enum ArticleStatus {
  open
  close
}

type Comment @model @key(fields: ["id"]) {
  id: ID!
  content: String
  user: User! @connection
  article: Article @connection(name: "ArticleComments")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Character
  @model
  @key(fields: ["id"])
  @key(name: "Bycontent", fields: ["content"]) {
  id: ID!
  content: String!
  applicants: [ApplicantCharacter]! @connection(name: "CharacterApplicants")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Skill
  @model
  @key(fields: ["id"])
  @key(name: "Bycontent", fields: ["content"]) {
  id: ID!
  content: String!
  applicants: [ApplicantSkill]! @connection(name: "SkillApplicants")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type ApplicantCharacter @model @key(fields: ["id"]) {
  id: ID!
  character: Character! @connection(name: "CharacterApplicants")
  applicant: Applicant! @connection(name: "ApplicantCharacters")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type ApplicantSkill @model @key(fields: ["id"]) {
  id: ID!
  applicant: Applicant! @connection(name: "ApplicantSkills")
  skill: Skill! @connection(name: "SkillApplicants")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Area
  @model
  @key(fields: ["id"])
  @key(name: "Bycontent", fields: ["content"]) {
  id: ID!
  content: String!
  articles: [Article!]! @connection(name: "ArticleArea")
  companies: [Company!]! @connection(name: "CompanyArea")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

# type Store @model {
#   id: ID!
#   admin: User!
#   company: Company! @connection(name: "CompanyStores", keyField: "companyId")
#   offres: [Offer!]!  # ont to many
#     @connection(
#       name: "StoreOffers"
#       keyField: "offerId"
#       sortField: "createdAt"
#     )
#   createdAt: AWSTimestamp!
#   updatedAt: AWSTimestamp!
# }

# type Offer @model {
#   id: ID!
#   store: Store! @connection(name: "StoreOffers", keyField: "storeId")
#   title: String!
#   content: String!
#   createdAt: AWSTimestamp!
#   updatedAt: AWSTimestamp!
# }

type User
  @model
  @key(fields: ["id"])
  @key(name: "ByUsername", fields: ["username"])
  @key(name: "ByDisplayName", fields: ["displayName"]) {
  id: ID!
  username: String!
  displayName: String!
  logo: String!
  user_role: String!

  invitedRooms: [InvitedRoom!]!
    @connection(name: "InvitedRooms", sortField: "createdAt")
  joinedRooms: [RoomUser!]!
    @connection(name: "UserRooms", sortField: "createdAt")
  ownedRooms: [Room!]! @connection(name: "OwnerRooms", sortField: "createdAt")

  # joined_stores: [Store!]!
  # owned_stores: [Store!]!

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Applicant @model {
  id: ID!
  user: User! @connection
  name: String!
  email: String!
  firstName: String
  lastName: String
  area: Area @connection
  logo: String
  backgroundImg: String
  about: String

  characters: [ApplicantCharacter]! @connection(name: "ApplicantCharacters")
  skills: [ApplicantSkill]! @connection(name: "ApplicantSkills")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type InvitedRoom
  @model(subscriptions: null)
  @key(fields: ["id"])
  @key(name: "ByToUsername", fields: ["toUsername", "status"]) {
  id: ID!
  room: Room! @connection(name: "InvitingUsers")
  toUser: User! @connection(name: "InvitedRooms")
  toUsername: String!
  fromUser: User! @connection
  status: invitedStatus!

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Room @model @key(fields: ["id"]) @key(name: "ByOwner", fields: ["owner"]) {
  id: ID!
  name: String!
  image: String!
  owner: String!
  user: User! @connection(name: "OwnerRooms")
  inviting: [InvitedRoom!]! @connection(name: "InvitingUsers")
  users: [RoomUser!]! @connection(name: "RoomUsers")
  messages: [Message!]! @connection(name: "RoomMessages")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Message @model(subscriptions: null) {
  id: ID!
  content: String!
  when: String!
  roomId: ID!
  owner: String!
  user: User! @connection
  room: Room! @connection(name: "RoomMessages")

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}

type Subscription {
  onCreateMessage(roomId: ID!): Message
    @aws_subscribe(mutations: ["createMessage"])

  onCreateInvitedRoom(toUsername: String!): InvitedRoom
    @aws_subscribe(mutations: ["createInvitedRoom"])

  onCreateRoomUser(username: String!): RoomUser
    @aws_subscribe(mutations: ["createRoomUser"])
}

# リレーション

type RoomUser
  @model(subscriptions: null)
  @key(fields: ["id"])
  @key(name: "ByUsername", fields: ["username"]) {
  id: ID!
  room: Room! @connection(name: "RoomUsers")
  user: User! @connection(name: "UserRooms")
  username: String!

  createdAt: AWSTimestamp!
  updatedAt: AWSTimestamp!
}
